/**
 * Blockly messages in supported languages
 */
angular.module('flocs.locales')
.factory('blocklyMessages', function(csBlocklyMessages, enBlocklyMessages) {
  return {
    'cs': csBlocklyMessages,
    'en': enBlocklyMessages,
  };
})

.factory('csBlocklyMessages', function() {
  var messages = {};
  messages.ADD_COMMENT = "Přidat komentář";
  messages.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";  // untranslated
  messages.CHANGE_VALUE_TITLE = "Změna hodnoty:";
  messages.CHAT = "Chat with your collaborator by typing in this box!";  // untranslated
  messages.CLEAN_UP = "Clean up Blocks";  // untranslated
  messages.COLLAPSE_ALL = "Skrýt bloky";
  messages.COLLAPSE_BLOCK = "Skrýt blok";
  messages.COLOUR_BLEND_COLOUR1 = "barva 1";
  messages.COLOUR_BLEND_COLOUR2 = "barva 2";
  messages.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
  messages.COLOUR_BLEND_RATIO = "poměr";
  messages.COLOUR_BLEND_TITLE = "smíchat";
  messages.COLOUR_BLEND_TOOLTIP = "Smíchá dvě barvy v daném poměru (0.0–1.0).";
  messages.COLOUR_PICKER_HELPURL = "https://cs.wikipedia.org/wiki/Barva";
  messages.COLOUR_PICKER_TOOLTIP = "Vyberte barvu z palety.";
  messages.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
  messages.COLOUR_RANDOM_TITLE = "náhodná barva";
  messages.COLOUR_RANDOM_TOOLTIP = "Zvolte barvu náhodně.";
  messages.COLOUR_RGB_BLUE = "modrá";
  messages.COLOUR_RGB_GREEN = "zelená";
  messages.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
  messages.COLOUR_RGB_RED = "červená";
  messages.COLOUR_RGB_TITLE = "barva s";
  messages.COLOUR_RGB_TOOLTIP = "Vytvoř barvu se zadaným množstvím červené, zelené a modré.  Všechny hodnoty musí být mezi 0 a 100.";
  messages.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
  messages.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "vymanit se ze smyčky";
  messages.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "pokračuj dalším opakováním smyčky";
  messages.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Přeruš vnitřní smyčku.";
  messages.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Přeskoč zbytek této smyčky a pokračuj dalším opakováním.";
  messages.CONTROLS_FLOW_STATEMENTS_WARNING = "Upozornění: Tento blok může být použit pouze uvnitř smyčky.";
  messages.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
  messages.CONTROLS_FOREACH_TITLE = "pro každou položku %1 v seznamu %2";
  messages.CONTROLS_FOREACH_TOOLTIP = "Pro každou položku v seznamu nastavte do proměnné '%1' danou položku a proveďte nějaké operace.";
  messages.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
  messages.CONTROLS_FOR_TITLE = "počítat s %1 od %2 do %3 po %4";
  messages.CONTROLS_FOR_TOOLTIP = "Nechá proměnnou \"%1\" nabývat hodnot od počátečního do koncového čísla po daném přírůstku a provádí s ní příslušné bloky.";
  messages.CONTROLS_IF_ELSEIF_TOOLTIP = "Přidat podmínku do \"pokud\" bloku.";
  messages.CONTROLS_IF_ELSE_TOOLTIP = "Přidej konečnou podmínku zahrnující ostatní případy do bloku pokud.";
  messages.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
  messages.CONTROLS_IF_IF_TOOLTIP = "Přidej, odstraň či uspořádej sekce k přenastavení tohoto bloku pokud.";
  messages.CONTROLS_IF_MSG_ELSE = "jinak";
  messages.CONTROLS_IF_MSG_ELSEIF = "nebo pokud";
  messages.CONTROLS_IF_MSG_IF = "pokud";
  messages.CONTROLS_IF_TOOLTIP_1 = "Je-li hodnota pravda, proveď určité příkazy.";
  messages.CONTROLS_IF_TOOLTIP_2 = "Je-li hodnota pravda, proveď první blok příkazů.  V opačném případě proveď druhý blok příkazů.";
  messages.CONTROLS_IF_TOOLTIP_3 = "Je-li první hodnota pravdivá, proveď první blok příkazů. V opačném případě, je-li pravdivá druhá hodnota, proveď druhý blok příkazů.";
  messages.CONTROLS_IF_TOOLTIP_4 = "Je-li první hodnota pravda, proveď první blok příkazů.  Je-li druhá hodnota pravda, proveď druhý blok příkazů.  Pokud žádná hodnota není pravda, proveď poslední blok příkazů.";
  messages.CONTROLS_REPEAT_HELPURL = "https://cs.wikipedia.org/wiki/Cyklus_for";
  messages.CONTROLS_REPEAT_INPUT_DO = ""; //"udělej";
  messages.CONTROLS_REPEAT_TITLE = "opakuj %1 krát";
  messages.CONTROLS_REPEAT_TOOLTIP = "Proveď určité příkazy několikrát.";
  messages.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
  messages.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "opakovat dokud";
  messages.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "opakovat když";
  messages.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Dokud je hodnota nepravdivá, prováděj určité příkazy.";
  messages.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Dokud je hodnota pravdivá, prováděj určité příkazy.";
  messages.DELETE_BLOCK = "Odstranit blok";
  messages.DELETE_X_BLOCKS = "Odstranit %1 bloky";
  messages.DISABLE_BLOCK = "Zakázat blok";
  messages.DUPLICATE_BLOCK = "zdvojit";
  messages.ENABLE_BLOCK = "Povolit blok";
  messages.EXPAND_ALL = "Rozbalit bloky";
  messages.EXPAND_BLOCK = "Rozbalení bloku";
  messages.EXTERNAL_INPUTS = "vnější vstupy";
  messages.HELP = "Nápověda";
  messages.INLINE_INPUTS = "Vložené vstupy";
  messages.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
  messages.LISTS_CREATE_EMPTY_TITLE = "vytvořit prázdný seznam";
  messages.LISTS_CREATE_EMPTY_TOOLTIP = "Vrátí seznam nulové délky, který neobsahuje žádné datové záznamy";
  messages.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "seznam";
  messages.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Přidat, odebrat nebo změnit pořadí oddílů tohoto seznamu bloku.";
  messages.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
  messages.LISTS_CREATE_WITH_INPUT_WITH = "vytvořit seznam s";
  messages.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Přidat položku do seznamu.";
  messages.LISTS_CREATE_WITH_TOOLTIP = "Vytvoř seznam s libovolným počtem položek.";
  messages.LISTS_GET_INDEX_FIRST = "první";
  messages.LISTS_GET_INDEX_FROM_END = "# od konce";
  messages.LISTS_GET_INDEX_FROM_START = "#";
  messages.LISTS_GET_INDEX_GET = "získat";
  messages.LISTS_GET_INDEX_GET_REMOVE = "získat a odstranit";
  messages.LISTS_GET_INDEX_LAST = "poslední";
  messages.LISTS_GET_INDEX_RANDOM = "náhodné";
  messages.LISTS_GET_INDEX_REMOVE = "odstranit";
  messages.LISTS_GET_INDEX_TAIL = "";  // untranslated
  messages.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Vrátí první položku v seznamu.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Vrátí položku z určené pozice v seznamu.  #1 je poslední položka.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Vrátí položku z určené pozice v seznamu.  #1 je první položka.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Vrátí poslední položku v seznamu.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Vrátí náhodnou položku ze seznamu.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Odstraní a vrátí první položku v seznamu.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Odstraní a vrátí položku z určené pozice v seznamu.  #1 je poslední položka.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Odstraní a vrátí položku z určené pozice v seznamu.  #1 je první položka.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Odstraní a vrátí poslední položku v seznamu.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Odstraní a vrátí náhodnou položku v seznamu.";
  messages.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Odstraní první položku v seznamu.";
  messages.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Odstraní položku na konkrétním místu v seznamu. #1 je poslední položka.";
  messages.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Odebere položku na konkrétním místě v seznamu.  #1 je první položka.";
  messages.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Odstraní poslední položku v seznamu.";
  messages.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Odstraní náhodou položku v seznamu.";
  messages.LISTS_GET_SUBLIST_END_FROM_END = "do # od konce";
  messages.LISTS_GET_SUBLIST_END_FROM_START = "do #";
  messages.LISTS_GET_SUBLIST_END_LAST = "jako poslední";
  messages.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
  messages.LISTS_GET_SUBLIST_START_FIRST = "získat podseznam od první položky";
  messages.LISTS_GET_SUBLIST_START_FROM_END = "získat podseznam od # od konce";
  messages.LISTS_GET_SUBLIST_START_FROM_START = "získat podseznam od #";
  messages.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
  messages.LISTS_GET_SUBLIST_TOOLTIP = "Vytvoří kopii určené části seznamu.";
  messages.LISTS_INDEX_OF_FIRST = "najít první výskyt položky";
  messages.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
  messages.LISTS_INDEX_OF_LAST = "najít poslední výskyt položky";
  messages.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns 0 if item is not found.";  // untranslated
  messages.LISTS_INLIST = "v seznamu";
  messages.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
  messages.LISTS_ISEMPTY_TITLE = "%1 je prázdné";
  messages.LISTS_ISEMPTY_TOOLTIP = "Vrátí hodnotu pravda, pokud je seznam prázdný.";
  messages.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
  messages.LISTS_LENGTH_TITLE = "délka %1";
  messages.LISTS_LENGTH_TOOLTIP = "Vrací počet položek v seznamu.";
  messages.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
  messages.LISTS_REPEAT_TITLE = "vytvoř seznam s položkou %1 opakovanou %1 krát";
  messages.LISTS_REPEAT_TOOLTIP = "Vytváří seznam obsahující danou hodnotu n-krát.";
  messages.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
  messages.LISTS_SET_INDEX_INPUT_TO = "jako";
  messages.LISTS_SET_INDEX_INSERT = "vložit na";
  messages.LISTS_SET_INDEX_SET = "nastavit";
  messages.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Vložit položku na začátek seznamu.";
  messages.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Vloží položku na určenou pozici v seznamu.  #1 je poslední položka.";
  messages.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Vloží položku na určenou pozici v seznamu.  #1 je první položka.";
  messages.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Připojí položku na konec seznamu.";
  messages.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Připojí položku náhodně do seznamu.";
  messages.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Nastaví první položku v seznamu.";
  messages.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Nastaví položku na konkrétní místo v seznamu. #1 je poslední položka.";
  messages.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Nastaví položku na konkrétní místo v seznamu. #1 je první položka.";
  messages.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Nastaví poslední položku v seznamu.";
  messages.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Nastaví náhodnou položku v seznamu.";
  messages.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
  messages.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";  // untranslated
  messages.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";  // untranslated
  messages.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
  messages.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
  messages.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";  // untranslated
  messages.LOGIC_BOOLEAN_FALSE = "nepravda";
  messages.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
  messages.LOGIC_BOOLEAN_TOOLTIP = "Vrací pravda nebo nepravda.";
  messages.LOGIC_BOOLEAN_TRUE = "pravda";
  messages.LOGIC_COMPARE_HELPURL = "https://cs.wikipedia.org/wiki/Nerovnost_(matematika)";
  messages.LOGIC_COMPARE_TOOLTIP_EQ = "Vrátí hodnotu pravda, pokud se oba vstupy rovnají jeden druhému.";
  messages.LOGIC_COMPARE_TOOLTIP_GT = "Navrátí hodnotu pravda, pokud první vstup je větší než druhý vstup.";
  messages.LOGIC_COMPARE_TOOLTIP_GTE = "Navrátí hodnotu pravda, pokud je první vstup větší a nebo rovný druhému vstupu.";
  messages.LOGIC_COMPARE_TOOLTIP_LT = "Navrátí hodnotu pravda, pokud je první vstup menší než druhý vstup.";
  messages.LOGIC_COMPARE_TOOLTIP_LTE = "Navrátí hodnotu pravda, pokud je první vstup menší a nebo rovný druhému vstupu.";
  messages.LOGIC_COMPARE_TOOLTIP_NEQ = "Vrátí hodnotu pravda, pokud se oba vstupy nerovnají sobě navzájem.";
  messages.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
  messages.LOGIC_NEGATE_TITLE = "není %1";
  messages.LOGIC_NEGATE_TOOLTIP = "Navrátí hodnotu pravda, pokud je vstup nepravda. Navrátí hodnotu nepravda, pokud je vstup pravda.";
  messages.LOGIC_NULL = "nula";
  messages.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
  messages.LOGIC_NULL_TOOLTIP = "Vrátí nulovou hodnotu";
  messages.LOGIC_OPERATION_AND = "a";
  messages.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
  messages.LOGIC_OPERATION_OR = "nebo";
  messages.LOGIC_OPERATION_TOOLTIP_AND = "Vrátí hodnotu pravda, pokud oba dva vstupy jsou pravdivé.";
  messages.LOGIC_OPERATION_TOOLTIP_OR = "Vrátí hodnotu pravda, pokud alespoň jeden ze vstupů má hodnotu pravda.";
  messages.LOGIC_TERNARY_CONDITION = "test";
  messages.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
  messages.LOGIC_TERNARY_IF_FALSE = "je-li nepravda";
  messages.LOGIC_TERNARY_IF_TRUE = "je-li to pravda";
  messages.LOGIC_TERNARY_TOOLTIP = "Zkontroluje podmínku v \"testu\". Když je podmínka pravda, vrátí hodnotu \"pokud pravda\"; v opačném případě vrátí hodnotu \"pokud nepravda\".";
  messages.MATH_ADDITION_SYMBOL = "+";  // untranslated
  messages.MATH_ARITHMETIC_HELPURL = "https://cs.wikipedia.org/wiki/Aritmetika";
  messages.MATH_ARITHMETIC_TOOLTIP_ADD = "Vrátí součet dvou čísel.";
  messages.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Vrátí podíl dvou čísel.";
  messages.MATH_ARITHMETIC_TOOLTIP_MINUS = "Vrátí rozdíl dvou čísel.";
  messages.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Vrátí součin dvou čísel.";
  messages.MATH_ARITHMETIC_TOOLTIP_POWER = "Vrátí první číslo umocněné na druhé číslo.";
  messages.MATH_CHANGE_HELPURL = "https://pt.wikipedia.org/wiki/Adi%C3%A7%C3%A3o";
  messages.MATH_CHANGE_TITLE = "změnit %1 od %2";
  messages.MATH_CHANGE_TOOLTIP = "Přičti číslo k proměnné '%1'.";
  messages.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
  messages.MATH_CONSTANT_TOOLTIP = "Vraťte jednu z následujících konstant: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
  messages.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
  messages.MATH_CONSTRAIN_TITLE = "omez %1 na rozmezí od %2 do %3";
  messages.MATH_CONSTRAIN_TOOLTIP = "Omezí číslo tak, aby bylo ve stanovených mezích (včetně).";
  messages.MATH_DIVISION_SYMBOL = "÷";
  messages.MATH_IS_DIVISIBLE_BY = "je dělitelné";
  messages.MATH_IS_EVEN = "je sudé";
  messages.MATH_IS_NEGATIVE = "je záporné";
  messages.MATH_IS_ODD = "je liché";
  messages.MATH_IS_POSITIVE = "je kladné";
  messages.MATH_IS_PRIME = "je prvočíslo";
  messages.MATH_IS_TOOLTIP = "Kontrola, zda je číslo sudé, liché, prvočíslo, celé, kladné, záporné nebo zda je dělitelné daným číslem. Vrací pravdu nebo nepravdu.";
  messages.MATH_IS_WHOLE = "je celé";
  messages.MATH_MODULO_HELPURL = "https://cs.wikipedia.org/wiki/Modul%C3%A1rn%C3%AD_aritmetika";
  messages.MATH_MODULO_TITLE = "zbytek po dělení %1 ÷ %2";
  messages.MATH_MODULO_TOOLTIP = "Vrátí zbytek po dělení dvou čísel.";
  messages.MATH_MULTIPLICATION_SYMBOL = "×";
  messages.MATH_NUMBER_HELPURL = "https://cs.wikipedia.org/wiki/Číslo";
  messages.MATH_NUMBER_TOOLTIP = "Číslo.";
  messages.MATH_ONLIST_HELPURL = "";  // untranslated
  messages.MATH_ONLIST_OPERATOR_AVERAGE = "průměr v seznamu";
  messages.MATH_ONLIST_OPERATOR_MAX = "největší v seznamu";
  messages.MATH_ONLIST_OPERATOR_MEDIAN = "medián v seznamu";
  messages.MATH_ONLIST_OPERATOR_MIN = "nejmenší v seznamu";
  messages.MATH_ONLIST_OPERATOR_MODE = "modes of list";  // untranslated
  messages.MATH_ONLIST_OPERATOR_RANDOM = "náhodná položka seznamu";
  messages.MATH_ONLIST_OPERATOR_STD_DEV = "směrodatná odchylka ze seznamu";
  messages.MATH_ONLIST_OPERATOR_SUM = "suma seznamu";
  messages.MATH_ONLIST_TOOLTIP_AVERAGE = "Vrátí průměr (aritmetický průměr) číselných hodnot v seznamu.";
  messages.MATH_ONLIST_TOOLTIP_MAX = "Vrátí největší číslo v seznamu.";
  messages.MATH_ONLIST_TOOLTIP_MEDIAN = "Vrátí medián seznamu.";
  messages.MATH_ONLIST_TOOLTIP_MIN = "Vrátí nejmenší číslo v seznamu.";
  messages.MATH_ONLIST_TOOLTIP_MODE = "Vrátí seznam nejčastějších položek seznamu.";
  messages.MATH_ONLIST_TOOLTIP_RANDOM = "Vrátí náhodnou položku ze seznamu.";
  messages.MATH_ONLIST_TOOLTIP_STD_DEV = "Vrátí směrodatnou odchylku seznamu.";
  messages.MATH_ONLIST_TOOLTIP_SUM = "Vrátí součet všech čísel v seznamu.";
  messages.MATH_POWER_SYMBOL = "^";
  messages.MATH_RANDOM_FLOAT_HELPURL = "https://cs.wikipedia.org/wiki/Gener%C3%A1tor_n%C3%A1hodn%C3%BDch_%C4%8D%C3%ADsel";
  messages.MATH_RANDOM_FLOAT_TITLE_RANDOM = "náhodné číslo mezi 0 (včetně) do 1";
  messages.MATH_RANDOM_FLOAT_TOOLTIP = "Vrátí náhodné číslo mezi 0,0 (včetně) až 1,0";
  messages.MATH_RANDOM_INT_HELPURL = "https://cs.wikipedia.org/wiki/Gener%C3%A1tor_n%C3%A1hodn%C3%BDch_%C4%8D%C3%ADsel";
  messages.MATH_RANDOM_INT_TITLE = "náhodné celé číslo od %1 do %2";
  messages.MATH_RANDOM_INT_TOOLTIP = "Vrací náhodné celé číslo mezi dvěma určenými mezemi, včetně mezních hodnot.";
  messages.MATH_ROUND_HELPURL = "https://cs.wikipedia.org/wiki/Zaokrouhlení";
  messages.MATH_ROUND_OPERATOR_ROUND = "zaokrouhlit";
  messages.MATH_ROUND_OPERATOR_ROUNDDOWN = "zaokrouhlit dolu";
  messages.MATH_ROUND_OPERATOR_ROUNDUP = "zaokrouhlit nahoru";
  messages.MATH_ROUND_TOOLTIP = "Zaokrouhlit číslo nahoru nebo dolů.";
  messages.MATH_SINGLE_HELPURL = "https://cs.wikipedia.org/wiki/Druhá_odmocnina";
  messages.MATH_SINGLE_OP_ABSOLUTE = "absolutní";
  messages.MATH_SINGLE_OP_ROOT = "druhá odmocnina";
  messages.MATH_SINGLE_TOOLTIP_ABS = "Vrátí absolutní hodnotu čísla.";
  messages.MATH_SINGLE_TOOLTIP_EXP = "Vrátí mocninu čísla e.";
  messages.MATH_SINGLE_TOOLTIP_LN = "Vrátí přirozený logaritmus čísla.";
  messages.MATH_SINGLE_TOOLTIP_LOG10 = "Vrátí desítkový logaritmus čísla.";
  messages.MATH_SINGLE_TOOLTIP_NEG = "Vrátí zápornou hodnotu čísla.";
  messages.MATH_SINGLE_TOOLTIP_POW10 = "Vrátí mocninu čísla 10.";
  messages.MATH_SINGLE_TOOLTIP_ROOT = "Vrátí druhou odmocninu čísla.";
  messages.MATH_SUBTRACTION_SYMBOL = "-";
  messages.MATH_TRIG_ACOS = "acos";
  messages.MATH_TRIG_ASIN = "arcsin";
  messages.MATH_TRIG_ATAN = "arctan";
  messages.MATH_TRIG_COS = "cos";
  messages.MATH_TRIG_HELPURL = "https://cs.wikipedia.org/wiki/Goniometrická_funkce";
  messages.MATH_TRIG_SIN = "sin";
  messages.MATH_TRIG_TAN = "tan";
  messages.MATH_TRIG_TOOLTIP_ACOS = "Vrátí arckosinus čísla.";
  messages.MATH_TRIG_TOOLTIP_ASIN = "Vrátí arcsinus čísla.";
  messages.MATH_TRIG_TOOLTIP_ATAN = "Vrátí arctangens čísla.";
  messages.MATH_TRIG_TOOLTIP_COS = "Vrátí kosinus úhlu ve stupních.";
  messages.MATH_TRIG_TOOLTIP_SIN = "Vrátí sinus úhlu ve stupních.";
  messages.MATH_TRIG_TOOLTIP_TAN = "Vrátí tangens úhlu ve stupních.";
  messages.ME = "Me";  // untranslated
  messages.NEW_VARIABLE = "Nová proměnná...";
  messages.NEW_VARIABLE_TITLE = "Nový název proměnné:";
  messages.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
  messages.PROCEDURES_ALLOW_STATEMENTS = "allow statements";  // untranslated
  messages.PROCEDURES_BEFORE_PARAMS = "s:";
  messages.PROCEDURES_CALLNORETURN_CALL = "";  // untranslated
  messages.PROCEDURES_CALLNORETURN_HELPURL = "https://cs.wikipedia.org/wiki/Funkce_(programov%C3%A1n%C3%AD)";
  messages.PROCEDURES_CALLNORETURN_TOOLTIP = "Spustí uživatelem definovanou funkci '%1'.";
  messages.PROCEDURES_CALLRETURN_HELPURL = "https://cs.wikipedia.org/wiki/Funkce_(programov%C3%A1n%C3%AD)";
  messages.PROCEDURES_CALLRETURN_TOOLTIP = "Spustí uživatelem definovanou funkci '%1' a použije její výstup.";
  messages.PROCEDURES_CALL_BEFORE_PARAMS = "s:";
  messages.PROCEDURES_CREATE_DO = "Vytvořit '%1'";
  messages.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
  messages.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
  messages.PROCEDURES_DEFNORETURN_PROCEDURE = "proveď něco";
  messages.PROCEDURES_DEFNORETURN_TITLE = "k provedení";
  messages.PROCEDURES_DEFNORETURN_TOOLTIP = "Vytvořit funkci bez výstupu.";
  messages.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
  messages.PROCEDURES_DEFRETURN_RETURN = "navrátit";
  messages.PROCEDURES_DEFRETURN_TOOLTIP = "Vytvořit funkci s výstupem.";
  messages.PROCEDURES_DEF_DUPLICATE_WARNING = "Upozornění: Tato funkce má duplicitní parametry.";
  messages.PROCEDURES_HIGHLIGHT_DEF = "Zvýraznit definici funkce";
  messages.PROCEDURES_IFRETURN_TOOLTIP = "Je-li hodnota pravda, pak vrátí druhou hodnotu.";
  messages.PROCEDURES_IFRETURN_WARNING = "Varování: Tento blok může být použit pouze uvnitř definici funkce.";
  messages.PROCEDURES_MUTATORARG_TITLE = "vstupní jméno:";
  messages.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";  // untranslated
  messages.PROCEDURES_MUTATORCONTAINER_TITLE = "vstupy";
  messages.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";  // untranslated
  messages.REMOVE_COMMENT = "Odstranit komentář";
  messages.RENAME_VARIABLE = "Přejmenovat proměnné...";
  messages.RENAME_VARIABLE_TITLE = "Přejmenujte všechny proměnné '%1':";
  messages.TEXT_APPEND_APPENDTEXT = "přidat text";
  messages.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
  messages.TEXT_APPEND_TO = "do";
  messages.TEXT_APPEND_TOOLTIP = "Přidá určitý text k proměnné '%1'.";
  messages.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
  messages.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "na malá písmena";
  messages.TEXT_CHANGECASE_OPERATOR_TITLECASE = "na Počáteční Velká Písmena";
  messages.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "na VELKÁ PÍSMENA";
  messages.TEXT_CHANGECASE_TOOLTIP = "Vrátí kopii textu s jinou velikostí písmen.";
  messages.TEXT_CHARAT_FIRST = "získat první písmeno";
  messages.TEXT_CHARAT_FROM_END = "získat # písmeno od konce";
  messages.TEXT_CHARAT_FROM_START = "získat písmeno #";
  messages.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
  messages.TEXT_CHARAT_INPUT_INTEXT = "v textu";
  messages.TEXT_CHARAT_LAST = "získat poslední písmeno";
  messages.TEXT_CHARAT_RANDOM = "získat náhodné písmeno";
  messages.TEXT_CHARAT_TAIL = "";  // untranslated
  messages.TEXT_CHARAT_TOOLTIP = "Získat písmeno na konkrétní pozici.";
  messages.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Přidat položku do textu.";
  messages.TEXT_CREATE_JOIN_TITLE_JOIN = "spojit";
  messages.TEXT_CREATE_JOIN_TOOLTIP = "Přidat, odebrat nebo změnit pořadí oddílů tohoto textového bloku.";
  messages.TEXT_GET_SUBSTRING_END_FROM_END = "do # písmene od konce";
  messages.TEXT_GET_SUBSTRING_END_FROM_START = "do písmene #";
  messages.TEXT_GET_SUBSTRING_END_LAST = "do posledního písmene";
  messages.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
  messages.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "v textu";
  messages.TEXT_GET_SUBSTRING_START_FIRST = "získat podřetězec od prvního písmene";
  messages.TEXT_GET_SUBSTRING_START_FROM_END = "získat podřetězec od písmene # od konce";
  messages.TEXT_GET_SUBSTRING_START_FROM_START = "získat podřetězec od písmene #";
  messages.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
  messages.TEXT_GET_SUBSTRING_TOOLTIP = "Získat zadanou část textu.";
  messages.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
  messages.TEXT_INDEXOF_INPUT_INTEXT = "v textu";
  messages.TEXT_INDEXOF_OPERATOR_FIRST = "najít první výskyt textu";
  messages.TEXT_INDEXOF_OPERATOR_LAST = "najít poslední výskyt textu";
  messages.TEXT_INDEXOF_TAIL = "";  // untranslated
  messages.TEXT_INDEXOF_TOOLTIP = "Vrátí index prvního/posledního výskytu prvního textu v druhém textu.  Pokud text není nalezen, vrátí hodnotu 0.";
  messages.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
  messages.TEXT_ISEMPTY_TITLE = "%1 je prázdný";
  messages.TEXT_ISEMPTY_TOOLTIP = "Vrátí pravda pokud je zadaný text prázdný.";
  messages.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
  messages.TEXT_JOIN_TITLE_CREATEWITH = "vytvořit text s";
  messages.TEXT_JOIN_TOOLTIP = "Vytvoří kousek textu spojením libovolného počtu položek.";
  messages.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
  messages.TEXT_LENGTH_TITLE = "délka %1";
  messages.TEXT_LENGTH_TOOLTIP = "Vrátí počet písmen (včetně mezer) v zadaném textu.";
  messages.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
  messages.TEXT_PRINT_TITLE = "tisk %1";
  messages.TEXT_PRINT_TOOLTIP = "Tisk zadaného textu, čísla nebo jiné hodnoty.";
  messages.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
  messages.TEXT_PROMPT_TOOLTIP_NUMBER = "Výzva pro uživatele k zadání čísla.";
  messages.TEXT_PROMPT_TOOLTIP_TEXT = "Výzva pro uživatele k zadání nějakého textu.";
  messages.TEXT_PROMPT_TYPE_NUMBER = "výzva k zadání čísla se zprávou";
  messages.TEXT_PROMPT_TYPE_TEXT = "výzva k zadání textu se zprávou";
  messages.TEXT_TEXT_HELPURL = "https://cs.wikipedia.org/wiki/Textov%C3%BD_%C5%99et%C4%9Bzec";
  messages.TEXT_TEXT_TOOLTIP = "Písmeno, slovo nebo řádek textu.";
  messages.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
  messages.TEXT_TRIM_OPERATOR_BOTH = "odstranit mezery z obou stran";
  messages.TEXT_TRIM_OPERATOR_LEFT = "odstranit mezery z levé strany";
  messages.TEXT_TRIM_OPERATOR_RIGHT = "odstranit mezery z pravé strany";
  messages.TEXT_TRIM_TOOLTIP = "Vrátí kopii textu s odstraněnými mezerami z jednoho nebo obou konců.";
  messages.TODAY = "Dnes";
  messages.VARIABLES_DEFAULT_NAME = "položka";
  messages.VARIABLES_GET_CREATE_SET = "Vytvořit \"nastavit %1\"";
  messages.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
  messages.VARIABLES_GET_TOOLTIP = "Vrátí hodnotu této proměnné.";
  messages.VARIABLES_SET = "nastav %1 na %2";
  messages.VARIABLES_SET_CREATE_GET = "Vytvořit \"získat %1\"";
  messages.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
  messages.VARIABLES_SET_TOOLTIP = "Nastaví tuto proměnnou, aby se rovnala vstupu.";
  messages.PROCEDURES_DEFRETURN_TITLE = messages.PROCEDURES_DEFNORETURN_TITLE;
  messages.CONTROLS_IF_IF_TITLE_IF = messages.CONTROLS_IF_MSG_IF;
  messages.CONTROLS_WHILEUNTIL_INPUT_DO = messages.CONTROLS_REPEAT_INPUT_DO;
  messages.CONTROLS_IF_MSG_THEN = messages.CONTROLS_REPEAT_INPUT_DO;
  messages.PROCEDURES_DEFRETURN_PROCEDURE = messages.PROCEDURES_DEFNORETURN_PROCEDURE;
  messages.CONTROLS_IF_ELSE_TITLE_ELSE = messages.CONTROLS_IF_MSG_ELSE;
  messages.PROCEDURES_CALLRETURN_CALL = messages.PROCEDURES_CALLNORETURN_CALL;
  messages.LISTS_GET_SUBLIST_INPUT_IN_LIST = messages.LISTS_INLIST;
  messages.LISTS_GET_INDEX_INPUT_IN_LIST = messages.LISTS_INLIST;
  messages.MATH_CHANGE_TITLE_ITEM = messages.VARIABLES_DEFAULT_NAME;
  messages.PROCEDURES_DEFRETURN_DO = messages.PROCEDURES_DEFNORETURN_DO;
  messages.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = messages.CONTROLS_IF_MSG_ELSEIF;
  messages.LISTS_GET_INDEX_HELPURL = messages.LISTS_INDEX_OF_HELPURL;
  messages.CONTROLS_FOREACH_INPUT_DO = messages.CONTROLS_REPEAT_INPUT_DO;
  messages.CONTROLS_FOR_INPUT_DO = messages.CONTROLS_REPEAT_INPUT_DO;
  messages.LISTS_CREATE_WITH_ITEM_TITLE = messages.VARIABLES_DEFAULT_NAME;
  messages.TEXT_APPEND_VARIABLE = messages.VARIABLES_DEFAULT_NAME;
  messages.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = messages.VARIABLES_DEFAULT_NAME;
  messages.LISTS_INDEX_OF_INPUT_IN_LIST = messages.LISTS_INLIST;
  messages.LISTS_SET_INDEX_INPUT_IN_LIST = messages.LISTS_INLIST;

  messages.MAZE_CHECK_COLOR = '%1 na %2 barvě';
  messages.MAZE_CHECK_GOAL = '%1 na políčku s %2';
  messages.MAZE_CHECK_PATH = "je cesta %1";
  messages.MAZE_MOVE_FORWARD = 'krok vpřed';
  messages.MAZE_MOVE_BACKWARD = 'krok dozadu';
  messages.MAZE_TURN = 'zatoč %1';
  messages.LEFT = 'doleva';
  messages.RIGHT = 'doprava';
  messages.TO_THE_LEFT = 'vlevo';
  messages.TO_THE_RIGHT = 'vpravo';
  messages.AHEAD = 'vpředu';
  messages.ARE = 'jsi';
  messages.ARE_NOT = 'nejsi';
  messages.IS = 'je';
  messages.IS_NOT = 'není';
  messages.OF_YELLOW = 'žluté';
  messages.OF_BLUE = 'modré';
  messages.OF_GREEN = 'zelené';
  messages.OF_WHITE = 'bílé';
  messages.THEN = 'pak';
  messages.ELSE = 'jinak';
  messages.CONTROLS_WHILE = "dokud %1: %2 %3";
  messages.MAZE = "bludiště";
  messages.LOOPS = "cykly";
  messages.CONDITIONS = "podmínky";
  messages.START = "začátek programu";

  return messages;
})

.factory('enBlocklyMessages', function() {
  var messages = {};
  messages.ADD_COMMENT = "Add Comment";
  messages.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
  messages.CHANGE_VALUE_TITLE = "Change value:";
  messages.CHAT = "Chat with your collaborator by typing in this box!";
  messages.CLEAN_UP = "Clean up Blocks";
  messages.COLLAPSE_ALL = "Collapse Blocks";
  messages.COLLAPSE_BLOCK = "Collapse Block";
  messages.COLOUR_BLEND_COLOUR1 = "colour 1";
  messages.COLOUR_BLEND_COLOUR2 = "colour 2";
  messages.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
  messages.COLOUR_BLEND_RATIO = "ratio";
  messages.COLOUR_BLEND_TITLE = "blend";
  messages.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
  messages.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
  messages.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
  messages.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
  messages.COLOUR_RANDOM_TITLE = "random colour";
  messages.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
  messages.COLOUR_RGB_BLUE = "blue";
  messages.COLOUR_RGB_GREEN = "green";
  messages.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
  messages.COLOUR_RGB_RED = "red";
  messages.COLOUR_RGB_TITLE = "colour with";
  messages.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
  messages.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
  messages.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
  messages.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
  messages.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
  messages.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
  messages.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
  messages.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
  messages.CONTROLS_FOREACH_TITLE = "for each item %1 in list %2";
  messages.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
  messages.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
  messages.CONTROLS_FOR_TITLE = "count with %1 from %2 to %3 by %4";
  messages.CONTROLS_FOR_TOOLTIP = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
  messages.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
  messages.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
  messages.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
  messages.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
  messages.CONTROLS_IF_MSG_ELSE = "else";
  messages.CONTROLS_IF_MSG_ELSEIF = "else if";
  messages.CONTROLS_IF_MSG_IF = "if";
  messages.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
  messages.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
  messages.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
  messages.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
  messages.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
  messages.CONTROLS_REPEAT_INPUT_DO = ""; //"do";
  messages.CONTROLS_REPEAT_TITLE = "repeat %1 times";
  messages.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
  messages.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
  messages.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
  messages.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
  messages.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
  messages.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
  messages.DELETE_BLOCK = "Delete Block";
  messages.DELETE_X_BLOCKS = "Delete %1 Blocks";
  messages.DISABLE_BLOCK = "Disable Block";
  messages.DUPLICATE_BLOCK = "Duplicate";
  messages.ENABLE_BLOCK = "Enable Block";
  messages.EXPAND_ALL = "Expand Blocks";
  messages.EXPAND_BLOCK = "Expand Block";
  messages.EXTERNAL_INPUTS = "External Inputs";
  messages.HELP = "Help";
  messages.INLINE_INPUTS = "Inline Inputs";
  messages.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
  messages.LISTS_CREATE_EMPTY_TITLE = "create empty list";
  messages.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
  messages.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
  messages.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
  messages.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
  messages.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
  messages.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
  messages.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
  messages.LISTS_GET_INDEX_FIRST = "first";
  messages.LISTS_GET_INDEX_FROM_END = "# from end";
  messages.LISTS_GET_INDEX_FROM_START = "#";
  messages.LISTS_GET_INDEX_GET = "get";
  messages.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
  messages.LISTS_GET_INDEX_LAST = "last";
  messages.LISTS_GET_INDEX_RANDOM = "random";
  messages.LISTS_GET_INDEX_REMOVE = "remove";
  messages.LISTS_GET_INDEX_TAIL = "";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list. #1 is the last item.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list. #1 is the first item.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list. #1 is the last item.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list. #1 is the first item.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
  messages.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
  messages.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
  messages.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list. #1 is the last item.";
  messages.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list. #1 is the first item.";
  messages.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
  messages.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
  messages.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
  messages.LISTS_GET_SUBLIST_END_FROM_START = "to #";
  messages.LISTS_GET_SUBLIST_END_LAST = "to last";
  messages.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
  messages.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
  messages.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
  messages.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
  messages.LISTS_GET_SUBLIST_TAIL = "";
  messages.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
  messages.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
  messages.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
  messages.LISTS_INDEX_OF_LAST = "find last occurrence of item";
  messages.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns 0 if item is not found.";
  messages.LISTS_INLIST = "in list";
  messages.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
  messages.LISTS_ISEMPTY_TITLE = "%1 is empty";
  messages.LISTS_ISEMPTY_TOOLTIP = "Returns true if the list is empty.";
  messages.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
  messages.LISTS_LENGTH_TITLE = "length of %1";
  messages.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
  messages.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
  messages.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
  messages.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
  messages.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
  messages.LISTS_SET_INDEX_INPUT_TO = "as";
  messages.LISTS_SET_INDEX_INSERT = "insert at";
  messages.LISTS_SET_INDEX_SET = "set";
  messages.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
  messages.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list. #1 is the last item.";
  messages.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list. #1 is the first item.";
  messages.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
  messages.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
  messages.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
  messages.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list. #1 is the last item.";
  messages.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list. #1 is the first item.";
  messages.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
  messages.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
  messages.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
  messages.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
  messages.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
  messages.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
  messages.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
  messages.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
  messages.LOGIC_BOOLEAN_FALSE = "false";
  messages.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
  messages.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
  messages.LOGIC_BOOLEAN_TRUE = "true";
  messages.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
  messages.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
  messages.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
  messages.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
  messages.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
  messages.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
  messages.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
  messages.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
  messages.LOGIC_NEGATE_TITLE = "not %1";
  messages.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
  messages.LOGIC_NULL = "null";
  messages.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
  messages.LOGIC_NULL_TOOLTIP = "Returns null.";
  messages.LOGIC_OPERATION_AND = "and";
  messages.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
  messages.LOGIC_OPERATION_OR = "or";
  messages.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
  messages.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
  messages.LOGIC_TERNARY_CONDITION = "test";
  messages.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
  messages.LOGIC_TERNARY_IF_FALSE = "if false";
  messages.LOGIC_TERNARY_IF_TRUE = "if true";
  messages.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
  messages.MATH_ADDITION_SYMBOL = "+";
  messages.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
  messages.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
  messages.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
  messages.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
  messages.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
  messages.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
  messages.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
  messages.MATH_CHANGE_TITLE = "change %1 by %2";
  messages.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
  messages.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
  messages.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
  messages.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
  messages.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
  messages.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
  messages.MATH_DIVISION_SYMBOL = "÷";
  messages.MATH_IS_DIVISIBLE_BY = "is divisible by";
  messages.MATH_IS_EVEN = "is even";
  messages.MATH_IS_NEGATIVE = "is negative";
  messages.MATH_IS_ODD = "is odd";
  messages.MATH_IS_POSITIVE = "is positive";
  messages.MATH_IS_PRIME = "is prime";
  messages.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
  messages.MATH_IS_WHOLE = "is whole";
  messages.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
  messages.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
  messages.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
  messages.MATH_MULTIPLICATION_SYMBOL = "×";
  messages.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
  messages.MATH_NUMBER_TOOLTIP = "A number.";
  messages.MATH_ONLIST_HELPURL = "";
  messages.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
  messages.MATH_ONLIST_OPERATOR_MAX = "max of list";
  messages.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
  messages.MATH_ONLIST_OPERATOR_MIN = "min of list";
  messages.MATH_ONLIST_OPERATOR_MODE = "modes of list";
  messages.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
  messages.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
  messages.MATH_ONLIST_OPERATOR_SUM = "sum of list";
  messages.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
  messages.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
  messages.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
  messages.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
  messages.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
  messages.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
  messages.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
  messages.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
  messages.MATH_POWER_SYMBOL = "^";
  messages.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
  messages.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
  messages.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
  messages.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
  messages.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
  messages.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
  messages.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
  messages.MATH_ROUND_OPERATOR_ROUND = "round";
  messages.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
  messages.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
  messages.MATH_ROUND_TOOLTIP = "Round a number up or down.";
  messages.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
  messages.MATH_SINGLE_OP_ABSOLUTE = "absolute";
  messages.MATH_SINGLE_OP_ROOT = "square root";
  messages.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
  messages.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
  messages.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
  messages.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
  messages.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
  messages.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
  messages.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
  messages.MATH_SUBTRACTION_SYMBOL = "-";
  messages.MATH_TRIG_ACOS = "acos";
  messages.MATH_TRIG_ASIN = "asin";
  messages.MATH_TRIG_ATAN = "atan";
  messages.MATH_TRIG_COS = "cos";
  messages.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
  messages.MATH_TRIG_SIN = "sin";
  messages.MATH_TRIG_TAN = "tan";
  messages.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
  messages.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
  messages.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
  messages.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
  messages.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
  messages.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
  messages.ME = "Me";
  messages.NEW_VARIABLE = "New variable...";
  messages.NEW_VARIABLE_TITLE = "New variable name:";
  messages.ORDINAL_NUMBER_SUFFIX = "";
  messages.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
  messages.PROCEDURES_BEFORE_PARAMS = "with:";
  messages.PROCEDURES_CALLNORETURN_CALL = "";
  messages.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
  messages.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
  messages.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
  messages.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
  messages.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
  messages.PROCEDURES_CREATE_DO = "Create '%1'";
  messages.PROCEDURES_DEFNORETURN_DO = "";
  messages.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
  messages.PROCEDURES_DEFNORETURN_PROCEDURE = "do something";
  messages.PROCEDURES_DEFNORETURN_TITLE = "to";
  messages.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
  messages.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
  messages.PROCEDURES_DEFRETURN_RETURN = "return";
  messages.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
  messages.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
  messages.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
  messages.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
  messages.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
  messages.PROCEDURES_MUTATORARG_TITLE = "input name:";
  messages.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
  messages.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
  messages.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
  messages.REMOVE_COMMENT = "Remove Comment";
  messages.RENAME_VARIABLE = "Rename variable...";
  messages.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
  messages.TEXT_APPEND_APPENDTEXT = "append text";
  messages.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
  messages.TEXT_APPEND_TO = "to";
  messages.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
  messages.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
  messages.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
  messages.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
  messages.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
  messages.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
  messages.TEXT_CHARAT_FIRST = "get first letter";
  messages.TEXT_CHARAT_FROM_END = "get letter # from end";
  messages.TEXT_CHARAT_FROM_START = "get letter #";
  messages.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
  messages.TEXT_CHARAT_INPUT_INTEXT = "in text";
  messages.TEXT_CHARAT_LAST = "get last letter";
  messages.TEXT_CHARAT_RANDOM = "get random letter";
  messages.TEXT_CHARAT_TAIL = "";
  messages.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
  messages.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
  messages.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
  messages.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
  messages.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
  messages.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
  messages.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
  messages.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
  messages.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
  messages.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
  messages.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
  messages.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
  messages.TEXT_GET_SUBSTRING_TAIL = "";
  messages.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
  messages.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
  messages.TEXT_INDEXOF_INPUT_INTEXT = "in text";
  messages.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
  messages.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
  messages.TEXT_INDEXOF_TAIL = "";
  messages.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns 0 if text is not found.";
  messages.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
  messages.TEXT_ISEMPTY_TITLE = "%1 is empty";
  messages.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
  messages.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
  messages.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
  messages.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
  messages.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
  messages.TEXT_LENGTH_TITLE = "length of %1";
  messages.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
  messages.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
  messages.TEXT_PRINT_TITLE = "print %1";
  messages.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
  messages.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
  messages.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
  messages.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
  messages.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
  messages.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
  messages.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
  messages.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
  messages.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
  messages.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
  messages.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
  messages.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
  messages.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
  messages.TODAY = "Today";
  messages.VARIABLES_DEFAULT_NAME = "item";
  messages.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
  messages.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
  messages.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
  messages.VARIABLES_SET = "set %1 to %2";
  messages.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
  messages.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
  messages.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
  messages.PROCEDURES_DEFRETURN_TITLE = messages.PROCEDURES_DEFNORETURN_TITLE;
  messages.CONTROLS_IF_IF_TITLE_IF = messages.CONTROLS_IF_MSG_IF;
  messages.CONTROLS_WHILEUNTIL_INPUT_DO = messages.CONTROLS_REPEAT_INPUT_DO;
  messages.CONTROLS_IF_MSG_THEN = messages.CONTROLS_REPEAT_INPUT_DO;
  messages.PROCEDURES_DEFRETURN_PROCEDURE = messages.PROCEDURES_DEFNORETURN_PROCEDURE;
  messages.CONTROLS_IF_ELSE_TITLE_ELSE = messages.CONTROLS_IF_MSG_ELSE;
  messages.PROCEDURES_CALLRETURN_CALL = messages.PROCEDURES_CALLNORETURN_CALL;
  messages.LISTS_GET_SUBLIST_INPUT_IN_LIST = messages.LISTS_INLIST;
  messages.LISTS_GET_INDEX_INPUT_IN_LIST = messages.LISTS_INLIST;
  messages.MATH_CHANGE_TITLE_ITEM = messages.VARIABLES_DEFAULT_NAME;
  messages.PROCEDURES_DEFRETURN_DO = messages.PROCEDURES_DEFNORETURN_DO;
  messages.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = messages.CONTROLS_IF_MSG_ELSEIF;
  messages.LISTS_GET_INDEX_HELPURL = messages.LISTS_INDEX_OF_HELPURL;
  messages.CONTROLS_FOREACH_INPUT_DO = messages.CONTROLS_REPEAT_INPUT_DO;
  messages.CONTROLS_FOR_INPUT_DO = messages.CONTROLS_REPEAT_INPUT_DO;
  messages.LISTS_CREATE_WITH_ITEM_TITLE = messages.VARIABLES_DEFAULT_NAME;
  messages.TEXT_APPEND_VARIABLE = messages.VARIABLES_DEFAULT_NAME;
  messages.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = messages.VARIABLES_DEFAULT_NAME;
  messages.LISTS_INDEX_OF_INPUT_IN_LIST = messages.LISTS_INLIST;
  messages.LISTS_SET_INDEX_INPUT_IN_LIST = messages.LISTS_INLIST;

  messages.MAZE_CHECK_COLOR = 'you %1 at %2';
  messages.MAZE_CHECK_GOAL = 'you %1 at %2';
  messages.MAZE_CHECK_PATH = "path %1";
  messages.MAZE_MOVE_FORWARD = 'move forward';
  messages.MAZE_MOVE_BACKWARD = 'move backward';
  messages.MAZE_TURN = 'turn %1';
  messages.LEFT = 'left';
  messages.RIGHT = 'right';
  messages.TO_THE_LEFT = 'to the left';
  messages.TO_THE_RIGHT = 'to the right';
  messages.AHEAD = 'ahead';
  messages.ARE = 'are';
  messages.ARE_NOT = 'are not';
  messages.IS = 'is';
  messages.IS_NOT = 'is not';
  messages.OF_YELLOW = 'yellow';
  messages.OF_BLUE = 'blue';
  messages.OF_GREEN = 'green';
  messages.OF_WHITE = 'white';
  messages.THEN = 'then';
  messages.ELSE = 'else';
  messages.CONTROLS_WHILE = "while %1: %2 %3";
  messages.MAZE = "maze";
  messages.LOOPS = "loops";
  messages.CONDITIONS = "conditions";
  messages.START = "program start";

  return messages;
});
